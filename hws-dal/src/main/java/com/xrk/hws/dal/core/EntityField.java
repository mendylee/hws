package com.xrk.hws.dal.core;

import java.beans.IntrospectionException;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.xrk.hws.dal.common.DbType;
/**
 * 
 * 类: 数据存储字段. <br/>  
 *
 * <br>==========================
 * <br> 公司：广州向日葵信息科技有限公司
 * <br> 开发：lijp<lijingping@xiangrikui.com>
 * <br> 版本：1.0
 * <br> 创建时间：2014年5月25日
 * <br> JDK版本：1.7
 * <br>==========================
 */
public  class EntityField
{
	private Field   fiedMeta;        		// 字段元数据          
	private String  columnName;     		// 存储名称
	private boolean isPK;                   // 是否主键
	private boolean isAutoGenerated;    	// 是否自增Id
	private boolean isRefType;              // 是否引用类型
	private DbType dbType;     				// 字段类型            
	private boolean isId = false;     		// 是否为ID         
	private boolean isAutoIncre = false;  	// 是否为自动增长字段     
	private boolean storeNull = true;     	// 是否允许存储空值  
	private boolean isUnique = false;		// 是否唯一
	private Entity subClass = null;     	// 子类实体
	private Entity motherClass = null;  	// 父类实例
	/**
	 * 数据字段类型，其取值范围为：枚举值，参见DataFieldType定义
	 */
	private DataFieldType decType = DataFieldType.ATOM;	
	
	public Field getFiedMeta()
    {
	    return fiedMeta;
    }

	public void setFiedMeta(Field fiedMeta)
    {
	    this.fiedMeta = fiedMeta;
    }
	
	public String getColumnName()
    {
	    return columnName;
    }
	
	public void setColumnName(String columnName)
    {
	    this.columnName = columnName;
    }
	
	public void setPK(boolean isPK)
    {
	    this.isPK = isPK;
    }
	
	public boolean isPK()
    {
	    return isPK;
    }
	
	public void setAutoGenerated(boolean isAutoGenerated)
    {
	    this.isAutoGenerated = isAutoGenerated;
    }
	
	public boolean isAutoGenerated()
    {
	    return isAutoGenerated;
    }
	
	public boolean isRefType()
	{
		return isRefType;
	}

	public void setRefType(boolean isRefType)
	{
		this.isRefType = isRefType;
	}

	public DbType getDbType()
	{
		return dbType;
	}

	public void setDbType(DbType dbType)
	{
		this.dbType = dbType;
	}

	public boolean isAutoIncre()
    {
	    return isAutoIncre;
    }

	public void setAutoIncre(boolean isAutoIncre)
    {
	    this.isAutoIncre = isAutoIncre;
    }

	public boolean isStoreNull()
    {
	    return storeNull;
    }

	public void setStoreNull(boolean storeNull)
    {
	    this.storeNull = storeNull;
    }

	public boolean isUnique()
	{
		return isUnique;
	}

	public void setUnique(boolean isUnique)
	{
		this.isUnique = isUnique;
	}

	public boolean isId()
    {
	    return isId;
    }

	public void setId(boolean isId)
    {
	    this.isId = isId;
    }
	
	public Entity getSubClass()
    {
	    return subClass;
    }

	public void setSubClass(Entity subClass)
    {
	    this.subClass = subClass;
    }
	
	public DataFieldType getDecType()
    {
	    return decType;
    }

	public void setDecType(DataFieldType decType)
    {
	    this.decType = decType;
    }

	public int setValue(Object obj,Object val)   
	{
		try
		{
			PropertyDescriptor pd = new PropertyDescriptor(fiedMeta.getName(),obj.getClass()); 
			Method methodSet = pd.getWriteMethod();  
			methodSet.invoke(obj, val);
		}
		catch(IntrospectionException | IllegalAccessException | InvocationTargetException e)
		{
			e.printStackTrace();
			return 1;
		}
		return 0;
	}
	
	public Object getValue(Object obj)
	{
		try
		{
	        PropertyDescriptor pd = new PropertyDescriptor(fiedMeta.getName(),obj.getClass());  
	        Method methodGet = pd.getReadMethod();  
	        return methodGet.invoke(obj);
		}
		catch(IntrospectionException | IllegalAccessException | InvocationTargetException e)
		{
			e.printStackTrace();
			return 1;
		}
	}

	public Entity getMotherClass()
	{
		return motherClass;
	}

	public void setMotherClass(Entity motherClass)
	{
		this.motherClass = motherClass;
	}

}
