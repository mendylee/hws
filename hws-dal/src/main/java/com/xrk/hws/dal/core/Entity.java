package com.xrk.hws.dal.core;


import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.regex.Pattern;

import org.bson.types.Binary;
import org.bson.types.ObjectId;

import com.xrk.hws.dal.DalManager;
import com.xrk.hws.dal.annotations.Column;
import com.xrk.hws.dal.annotations.GeneratedValue;
import com.xrk.hws.dal.annotations.Id;
import com.xrk.hws.dal.annotations.Index;
import com.xrk.hws.dal.annotations.Indexes;
import com.xrk.hws.dal.annotations.Table;
import com.xrk.hws.dal.exception.DalException;



/**
 * 类: 目标元数据信息. <br/>  
 *
 * <br>==========================
 * <br> 公司：广州向日葵信息科技有限公司
 * <br> 开发：lijp<lijingping@xiangrikui.com>
 * <br> 版本：1.0
 * <br> 创建时间：2014年5月25日
 * <br> JDK版本：1.7
 * <br>==========================
 */
public class Entity
{
    private String fullName;                                 // 包名+类名
    private String packageName;                              // 包名
    private String className;                                // 类名
    private String tableName;                                // 表名
    private boolean isRowcache;								 // 是否做了row缓存
    private boolean isCacheEnabled;							 // 是否开启row缓存
    private Class<?> classMeta;                              // 类元数据
    private EntityField idEntityField;                     	 // _id
    private StorIndex index;  								 // 主键索引
    private boolean isAutoGenerated = false;        		 // 是否自增实体
    private EntityField autoGeneratedField;              	 // 自增字段
    
    private List<EntityField> fieldList = new ArrayList<EntityField>();
    private Map<String, EntityField> decFieldMap = new HashMap<String, EntityField>();  // Field集合， fieldname为key
    private Map<String, EntityField> storFieldMap = new HashMap<String, EntityField>(); // Field集合， storage key为key
    private Map<String,StorIndex> indexes = new HashMap<String,StorIndex>();

	/**
     * 
     * 加载实体类，目前暂时不支持继承和内部类  
     *    
     * @param packageName
     * @param className
     * @return
     */
    public int loadClass(String packageName,String className)
    {    	
    	setPackageName(packageName);
    	setClassName(className);
    	setFullName(packageName+"."+className);
    	
    	try
    	{
	        this.classMeta = Class.forName(this.fullName);
        }
        catch (ClassNotFoundException e) 
        {
	        e.printStackTrace();
	        return 1;
        }
    	
    	//获取实体注解类
    	if(!classMeta.isAnnotationPresent(Table.class))
    	{
            // ORM异常，缺少注解@Table
        	String message = "miss @Table: " + packageName+"."+className;
        	DalException er = new DalException(message);
        	er.logError(er, message);
        	throw er;
    	}
    	Table table = classMeta.getAnnotation(Table.class);
    	if(table != null)
    	{
    		this.setTableName(table.name());
    	}   	
    	
    	//获取所有的存储字段
    	boolean pkFlag = false;
    	
    	Field[] fields = this.classMeta.getDeclaredFields();
    	for (Field field:fields)
    	{  
            // 设置field的访问权限
            field.setAccessible(true);
            if(field.isAnnotationPresent(Column.class))
            {
            	Column column = field.getAnnotation(Column.class);
        		if(column != null)
        		{
        			EntityField entityField = new EntityField();
        			entityField.setMotherClass(this);
        			entityField.setFiedMeta(field);
                    entityField.setColumnName(column.name());
                    entityField.setDbType(column.type());
                    entityField.setStoreNull(column.storeNull());
                    entityField.setAutoIncre(column.isAutoIncre());
                    
                    this.decFieldMap.put(field.getName(),entityField);
                    this.storFieldMap.put(column.name(), entityField);
                    this.fieldList.add(entityField);
                    
                    // 主键检查
                    if(field.isAnnotationPresent(Id.class))
                    {
                    	if(pkFlag)
                    	{
                            // ORM异常，重复的主键标识@Id
                        	String message = "repeated @Id";
                        	DalException er = new DalException(message);
                        	er.logError(er, message);
                        	throw er;
                    	}
                        pkFlag = true;
                        entityField.setPK (true);
                        
                		//获取主键索引注解
                		Id id = field.getAnnotation(Id.class);
                		if(id != null)
                		{
                			// 实体类添加主键pk字段
                            this.setIdEntityField(entityField);
                		}
                		
                        // 自增Id判断
                        if (field.isAnnotationPresent(GeneratedValue.class)) 
                        {
                            entityField.setAutoGenerated (true);
                            this.setAutoGenerated(true);
                            this.setAutoGeneratedField(entityField);
                        }
                    }
                    else
                    {
                    	if(field.isAnnotationPresent(GeneratedValue.class))
                    	{
                            // ORM异常，重复的数据库表Table
                        	String message = "auto generated field must be @Id: " + this.getFullName();
                        	DalException er = new DalException(message);
                        	er.logError(er, message);
                        	throw er;
                    	}
                    }
                    
            		if(this.loadFieldClass(entityField) != 0)
            		{
            			return 1;
            		}
        		}  
            }
    	}
    	
    	//获取索引字段
    	if(this.setIndexes(classMeta.getAnnotation(Indexes.class)) != 0)
    	{
    		return 1;
    	}
    	return 0;
    }
    
    /**
     * 
     * 加载字段描述类  
     *    
     * @param field
     * @return
     */
    private int loadFieldClass(EntityField field)
    {
    	Class<?> fieldClass = null;
    	Class<?> subClass = null;

    	if( field == null || field.getFiedMeta() == null || (fieldClass = field.getFiedMeta().getType()) == null )
    	{
    		return 1;
    	}
    	
    	if(Entity.isClassLoadKnowEnd(fieldClass))
    	{
    		field.setDecType(DataFieldType.ATOM);
    		return 0;
    	} 
    	
    	if(Collection.class.isAssignableFrom(fieldClass))
    	{
    		field.setDecType(DataFieldType.COLLECTION);
	        Type gt = field.getFiedMeta().getGenericType();   //得到泛型类型 
	        java.lang.reflect.ParameterizedType pt = (java.lang.reflect.ParameterizedType)gt;
	        Type[] types = pt.getActualTypeArguments();
	        
	        subClass = (Class<?>)(types[0]);    		
    	}
    	else if(Map.class.isAssignableFrom(fieldClass))
    	{
    		field.setDecType(DataFieldType.MAP);
	        Type gt = field.getFiedMeta().getGenericType();   //得到泛型类型 
	        java.lang.reflect.ParameterizedType pt = (java.lang.reflect.ParameterizedType)gt;
	        
	        Type[] types = pt.getActualTypeArguments();
	        
	        if(!((Class<?>)types[0]).equals(String.class))
	        {
	        	return 1;
	        }
	        
	        /*
	         *  (2015-05-11)
	         *  对于是泛型类型的对象，需要单独的做处理
	         *  否则会出现(ParameterizedTypeImpl cannot be cast to java.lang.Class)
	         */
	        if(types[1] != null && types[1] instanceof ParameterizedType)
	        {
	        	ParameterizedType ptt = (ParameterizedType) types[1];
	        	subClass = (Class<?>)(ptt.getActualTypeArguments()[0]);
	        }
	        else
	        {
	        	subClass = (Class<?>) types[1];
	        }
    	}
    	else if(fieldClass.isArray())
    	{
    		field.setDecType(DataFieldType.ARRAY);
    		subClass = fieldClass.getComponentType();
    	}
    	
    	//对于集合类型的对象
    	if(subClass != null)
    	{  
            /*is basic class,encoder do it auto,otherwise,annotation should be done to the class*/
            if(Entity.isClassLoadKnowEnd(subClass))
            {
            	return 0;
            }
            
            Entity newDataClass = DalManager.getInstance().getDataClass(subClass.getName());
            
          	/*the class has been loaded,return ok*/
        	if(newDataClass != null)
        	{
        		field.setSubClass(newDataClass);
        		return 0;
        	}
        	
        	newDataClass = new Entity(); 
        	newDataClass.setFullName(subClass.getName());
        	
        	/*add first avoiding recall*/
        	DalManager.getInstance().addDataClass(newDataClass);     	
        	
        	if(newDataClass.loadClass(subClass.getPackage().getName(), subClass.getSimpleName()) != 0)
        	{
        		DalManager.getInstance().removeDataClass(newDataClass);
        		return 1;
        	}        	
        	
        	field.setSubClass(newDataClass);
        	
        	return 0;                
    	}
    	else 
        {        	
    		Entity newDataClass = DalManager.getInstance().getDataClass(fieldClass.getName());
            
        	if(newDataClass != null)
        	{
        		field.setDecType(DataFieldType.CLASS);
        		field.setSubClass(newDataClass);
        		return 0;
        	}
        	
        	newDataClass = new Entity();
        	newDataClass.setFullName(fieldClass.getName());
        	DalManager.getInstance().addDataClass(newDataClass);
        	
        	if(newDataClass.loadClass(fieldClass.getPackage().getName(), fieldClass.getSimpleName()) != 0)
        	{
        		DalManager.getInstance().removeDataClass(newDataClass);
        		return 1;
        	}       	
        	
        	
        	field.setDecType(DataFieldType.CLASS);
        	field.setSubClass(newDataClass);        	
        	return 0;
        }
    }
    
    public static  boolean isClassLoadKnowEnd(Class<?> theClass)
    {
		if(theClass != null)
		{
	    	if(  theClass.isPrimitive() 
				||( theClass.isAssignableFrom(Byte.class))
				||( theClass.isAssignableFrom(Short.class))
		        ||( theClass.isAssignableFrom(Integer.class))
		        ||( theClass.isAssignableFrom(Long.class))
		        ||( theClass.isAssignableFrom(Float.class))
		        ||( theClass.isAssignableFrom(Double.class))
		        ||( theClass.isAssignableFrom(Boolean.class))
		        ||( theClass.isAssignableFrom(Character.class))
	   	        ||( theClass.isAssignableFrom(String.class))
		        ||( theClass.isAssignableFrom(Number.class) )
	  	        ||( theClass.isAssignableFrom(Date.class) )
		        ||( theClass.isAssignableFrom(ObjectId.class))
		        ||( theClass.isAssignableFrom(Pattern.class))
		        ||( theClass.isAssignableFrom(byte[].class))
		        ||( theClass.isAssignableFrom(Binary.class))
		        ||( theClass.isAssignableFrom(UUID.class))
	    	)
	    	{
	    		return true;
	    	}
	    	else
	    	{
	    		return false;
	    	}
		}
		
	    return true;
    }

	public String getPackageName()
    {
	    return packageName;
    }

	public void setPackageName(String packageName)
    {
	    this.packageName = packageName;
    }

	public String getClassName()
    {
	    return className;
    }

	public void setClassName(String className)
    {
	    this.className = className;
    }

	public String getFullName()
    {
	    return fullName;
    }

	public void setFullName(String fullName)
    {
	    this.fullName = fullName;
    }

	public Class<?> getClassMeta()
    {
	    return classMeta;
    }

	public void setClassMeta(Class<?> classMeta)
    {
	    this.classMeta = classMeta;
    }
	
	public void setTableName(String tableName)
    {
	    this.tableName = tableName;
    }
	
	public String getTableName()
    {
	    return tableName;
    }

	public List<EntityField> getAllDataField()
	{
		return this.fieldList;
	}

	public EntityField getIdEntityField()
    {
	    return idEntityField;
    }

	public void setIdEntityField(EntityField idEntityField)
    {
	    this.idEntityField = idEntityField;
    }

	public HashMap<String,StorIndex> getIndexes()
    {
	    return (HashMap<String, StorIndex>) indexes;
    }

	public int setIndexes(Indexes indexes)
    {
	    if(indexes != null)
	    {
	    	Index[] theIndexes = indexes.value();
		    for(int i=0;i<theIndexes.length;i++)
		    {
		    	Index index = theIndexes[i];
		    	StorIndex storIndex = new StorIndex();
                //like: "-fied1,field2"
		    	String iconf = index.value();
		    	if(iconf != null)
		    	{
		    		String[] ifNames = iconf.split(Index.SEPARATOR);
		    		for(int j=0;j<ifNames.length;j++)
		    		{
		    			String ifName = ifNames[j];
		    			
		    			boolean desc = false;
		    			if(ifName.charAt(0) == Index.DESCPREFIX.charAt(0))
		    			{
		    				desc = true;
		    				ifName = ifName.substring(1);
		    			}
		    			
		    			EntityField dataField = this.getStorDataField(ifName);	
		    			
		    			if(dataField != null)
		    			{
		    				IndexField ifield = new IndexField();
		    				ifield.setDataField(dataField);	
			    			ifield.setDesc(desc);
			    			storIndex.addIndexfield(ifield);
		    			}
		    			else
		    			{
		    				return 1;
		    			}
		    		}
		    		
		    		if(index.primary())
		    		{
		    			if(this.getIndex() != null)
		    			{
		    				return 1;
		    			}
		    			
		    			this.setIndex(storIndex);
		    		}	
		    		
		    		storIndex.setPk(index.primary());
			    	storIndex.setUnique(index.unique());
		    		this.addIndex(storIndex);
		    	}
		    	else
		    	{
		    		return 1;
		    	}
		    }
	    }
	    
	    return 0;

    }
	
	public int addIndex(StorIndex index)
    {
		if(indexes.get(index.getName()) == null)
		{
			 this.indexes.put(index.getName(),index);
			 return 0;
		}
	   
		return 1;
    }
	
	public StorIndex addIndex(String name)
    {
		return indexes.get(name);   
    }
	
	public EntityField getDecDataField(String name)
    {
	    return this.decFieldMap.get(name);
    }
	
	public EntityField getStorDataField(String name)
    {
	    return this.storFieldMap.get(name);
    }

	public StorIndex getIndex()
    {
	    return index;
    }

	public void setIndex(StorIndex index)
    {
	    this.index = index;
    }
	
	public void setAutoGenerated(boolean isAutoGenerated)
    {
	    this.isAutoGenerated = isAutoGenerated;
    }
	
	public boolean isAutoGenerated()
    {
	    return isAutoGenerated;
    }
	
	public void setAutoGeneratedField(EntityField autoGeneratedField)
    {
	    this.autoGeneratedField = autoGeneratedField;
    }
	
	public EntityField getAutoGeneratedField()
    {
	    return autoGeneratedField;
    }
	
	public void setRowcache(boolean isRowcache)
    {
	    this.isRowcache = isRowcache;
    }
	
	public boolean isRowcache()
    {
	    return isRowcache;
    }
	
	public void setCacheEnabled(boolean isCacheEnabled)
    {
	    this.isCacheEnabled = isCacheEnabled;
    }
	
	public boolean isCacheEnabled()
    {
	    return isCacheEnabled;
    }
}
