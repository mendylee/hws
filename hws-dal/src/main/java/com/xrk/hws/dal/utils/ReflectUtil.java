package com.xrk.hws.dal.utils;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.mongodb.BasicDBObject;
import com.xrk.hws.dal.common.CommandTemplate;
import com.xrk.hws.dal.common.DbType;
import com.xrk.hws.dal.common.DbTypeUtils;
import com.xrk.hws.dal.core.CommandType;
import com.xrk.hws.dal.core.DataSet;
import com.xrk.hws.dal.core.Entity;
import com.xrk.hws.dal.core.EntityField;
import com.xrk.hws.dal.core.Formater;
import com.xrk.hws.dal.exception.DalException;
import com.xrk.hws.dal.jdbc.SQL;

/**
 * 类: 数据库客户端辅助类.
 *
 * <br>==========================
 * <br> 公司：广州向日葵信息科技有限公司
 * <br> 开发：lijp<lijingping@xiangrikui.com>
 * <br> 版本：1.0
 * <br> 创建时间：2015年5月30日
 * <br> JDK版本：1.7
 * <br>==========================
 */
public class ReflectUtil
{
	public static String formatPrintable(Formater format, Object[] params)
	{
		if (format != null)
		{
			String ftContent = format.getContent().trim();
			if(ftContent.contains("$lte"))
			{
				ftContent = ftContent.replace("$lte", "<=");
			}
			else if(ftContent.contains("$lt"))
			{
				ftContent = ftContent.replace("$lt", "<");
			}
			if (ftContent != null)
			{
				int paraNum = format.getParaNum();
				if (params != null && paraNum > 0)
				{
					if(params.length == paraNum)
					{
						return String.format(ftContent, params);
					}
					else
					{
						System.err.println("Parameter not match,Please check your parameters!");
						return null;
					}
				}
				else
				{
					return String.format(ftContent);
				}
			}
		}
		return null;
	}
	
	/**
	 * 更新数据格式化.  
	 *    
	 * @param dataSet	数据集对象.
	 * @param temp		命令模版对象.
	 * @param upKVs		更新键值集合.
	 * @return
	 */
	public static  String formatUpdateAuto(DataSet dataSet, CommandTemplate temp,Map<String, Object> upKVs)
	{
		if (upKVs == null || upKVs.size() == 0)
		{
			return null;
		}
		StringBuilder upBuilder = new StringBuilder();
		Entity dataClass = dataSet.getMyClass();
		
		EntityField field = null;
		int size = upKVs.entrySet().size();
		for (Entry<String, Object> entry : upKVs.entrySet())
		{
			field = dataClass.getStorDataField(entry.getKey());
			Object value = entry.getValue();
			if (field == null)
			{
				return null;
			}
			if(value instanceof String)
			{
				upBuilder.append(field.getColumnName()).append("=").append("'" + value+"'");
			}
			else if(value instanceof Date)
			{
				upBuilder.append(field.getColumnName()).append("=").append("'" + new Timestamp(((Date)value).getTime()) + "'");
			}
			else
			{
				upBuilder.append(field.getColumnName()).append("=").append(value);
			}
			if(size > 1)
			{
				upBuilder.append(",");
			}
			size --;
		}
		return upBuilder.toString();
	}
	
	public static int putDataField(BasicDBObject holder, EntityField field, Class<?> metaClass, Object value)
    {
	    return 0;
    }

	public static <T> String putObject(int opType,final Entity dataClass,final T data)
	{		
		if(dataClass != null && data != null)
		{
			final Class<?> metaClass = dataClass.getClassMeta();
			final Class<?> storClass = data.getClass();			
			StringBuilder builder = null;
			if(storClass.equals(metaClass))
			{
				switch (opType) 
				{
					case CommandType.INSETONE:
						builder = new StringBuilder();
						new SQL(){
							{
								INSERT_INTO(dataClass.getTableName());
								List<EntityField> fields = dataClass.getAllDataField();
								for(EntityField field: fields)
								{
									Object value = null;
									if(field.isAutoGenerated())
									{
										DbType autoType = field.getDbType();
										if(autoType != DbType.INT && autoType != DbType.BIGINT)
										{
							            	// 该接口只支持 Int32 的自增字段
							               	String message = "only support 'int/Integer' or 'long/Long' datatype";
							            	DalException er = new DalException(message);
							            	er.logError(er, message);
							            	throw er;
										}
										continue;
									}
									else
									{
										value = field.getValue(data);
									}
									
									if((value != null && value instanceof String))
									{
										VALUES(field.getColumnName(),String.valueOf("\'" + value + "\'"));	
									}
									else if((value != null && value instanceof Date))
									{
										VALUES(field.getColumnName(),String.valueOf("\'" + new Timestamp(((Date)value).getTime()) + "\'"));	
									}
									else 
									{
										VALUES(field.getColumnName(),String.valueOf(value));	
									}
								}
							}
						}.usingAppender(builder).toString();
						break;
					default:
						builder = new StringBuilder("execute");
						break;
				}
				return builder.toString();
            }
		}
		return null;
	}
	
	/**
	 * 获取泛型对象.  
	 *    
	 * @param dataClass
	 * @param dbObject
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static  <T> T getObject(Entity dataClass, ResultSet storObject)
    {
		if(dataClass != null && storObject != null)
		{
			Class<?> metaClass = dataClass.getClassMeta();
			List<EntityField> fields;			

			fields = dataClass.getAllDataField();
			Object data;
            try 
            {
	            data = metaClass.newInstance();
            }
            catch (InstantiationException |IllegalAccessException e1) 
            {
	            e1.printStackTrace();
	            return null;
            }
			for(EntityField field:fields)
			{
                if(getDataField(storObject, field,data) != 0)
                {
                	return null;
                } 
			}
			return (T)data;
		}
	    return null;
    }
	
	/**
	 * 获取成员属性.  
	 *    
	 * @param rs
	 * @param entityField
	 * @param mother
	 * @return
	 */
	public static int getDataField(ResultSet rs, EntityField entityField, Object data)
	{
		Object value = null;
		try
		{
			value = rs.getObject(entityField.getColumnName());
			if (value == null) 
			{
				return 0;
			}
			if(value instanceof BigDecimal)
			{
				value = Double.parseDouble(value.toString());
			}
			if(value instanceof Boolean)
			{
				value = DbTypeUtils.getBooleanValue(value);
			}
			if(entityField.getDbType() == DbType.DATETIME)
			{
				value = DbTypeUtils.getDateValue(value);
			}
            if (entityField.getDbType() == DbType.BLOB) 
            {
            	value = DbTypeUtils.getBlobValue(value);
            }
            if (entityField.getDbType() == DbType.CLOB) 
            {
            	value = DbTypeUtils.getClobValue(value);
            }
            return entityField.setValue(data, value);
		}
		catch (SQLException e) 
		{
			return 1;
   	 	}
	}
}
